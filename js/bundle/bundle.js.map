{"version":3,"sources":["webpack:///webpack/bootstrap 7981b4eb4c8434dbea6f","webpack:///./lib/mainScene.js","webpack:///./lib/stellar_objects/stellar_object.js","webpack:///./lib/helpers/mathHelper.js","webpack:///./lib/stellar_objects/simObject.js","webpack:///./lib/scene/sceneManager.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,wCAAwC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAA+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;ACnIA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kDAAiD,gBAAgB;;AAEjE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC/JA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAkB;AAClB;;AAEA;;;;;;;ACbA;AACA;AACA;AACA;AACA,2CAA0C,kBAAkB;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7981b4eb4c8434dbea6f","const StellarObject = require ('./stellar_objects/stellar_object.js');\nconst MathHelper = require ('./helpers/mathHelper.js');\nconst SceneManager = require ('./scene/sceneManager.js');\n\nSceneManager.initScene();\n\nconst sun = new StellarObject(\n  695.7,\n  \"./textures/sun/sun_diffuse.jpg\",\n  SceneManager.scene,\n  \"Sun\"\n)\nsun.obj.position.x = 1; // Hack to prevent issue with controls; Orbitcontrols fail when position is (0,0,0)\n\nconst mercury = new StellarObject(\n  2.4397,\n  \"./textures/mercury/mercury_diffuse.jpg\",\n  sun.obj,\n  \"Mercury\"\n)\nmercury.addOrbit(0.3871, 0.20563, 3.38, 0.3075, sun, 0x616569);\nmercury.updatePosition(0);\n\nconst venus = new StellarObject(\n  6.052,\n  \"./textures/venus/venus_diffuse.jpg\",\n  sun.obj,\n  \"Venus\"\n)\n\nvenus.addOrbit(0.7233, 0.0067, 3.86, 0.7184, sun, 0x8f8d77);\nvenus.updatePosition(0);\n\nconst earth = new StellarObject(\n  6.371,\n  \"./textures/earth/earth_diffuse.jpg\",\n  sun.obj,\n  \"Earth\"\n)\nearth.obj.position.x += 1;\n\nearth.addOrbit(1, 0.0167, 7.16, 0.9833, sun, 0x4d65a4);\nearth.updatePosition(0);\n\n// const moon = new StellarObject(\n//   1.7371,\n//   \"./textures/moon/moon_diffuse.jpg\",\n//   earth.obj\n// )\n// moon.obj.position.x = 38.44; // correct value: 384.4\n\nconst mars = new StellarObject(\n  3.3895,\n  \"./textures/mars/mars_diffuse.jpg\",\n  sun.obj,\n  \"Mars\"\n)\nmars.addOrbit(1.524 , 0.0934, 5.65, 1.3814, sun, 0x79260f);\nmars.updatePosition(0);\n\nconst jupiter = new StellarObject(\n  69.911,\n  \"./textures/jupiter/jupiter_diffuse.jpg\",\n  sun.obj,\n  \"Jupiter\"\n)\njupiter.addOrbit(5.2026, 0.048498, 6.09, 4.95029, sun, 0xd4b48d);\njupiter.updatePosition(0);\n\nconst saturn = new StellarObject(\n  58.262,\n  \"./textures/saturn/saturn_diffuse.jpg\",\n  sun.obj,\n  \"Saturn\"\n)\n\nsaturn.addRing(\n  (58.262 + 6.630),\n  (58.262 + 120.7),\n  \"./textures/saturn/saturn_ring_diffuse.jpg\",\n  \"./textures/saturn/saturn_ring_trans.jpg\"\n);\n\nsaturn.ring.rotation.x = -45;\nsaturn.addOrbit(9.5549, 0.05555, 5.51, 9.024, sun, 0xceaf58);\nsaturn.updatePosition(0);\n\nconst uranus = new StellarObject(\n  25.362,\n  \"./textures/uranus/uranus_diffuse.jpg\",\n  sun.obj,\n  \"Uranus\"\n)\n\nuranus.addRing(\n  (25.362 + 26.840),\n  (25.362 + 103),\n  \"./textures/uranus/uranus_ring_diffuse.jpg\",\n  \"./textures/uranus/uranus_ring_trans.jpg\"\n);\n\nuranus.ring.rotation.x = -45;\nuranus.addOrbit(19.2184, 0.04638, 6.48, 18.33, sun, 0xc2edee);\nuranus.updatePosition(0);\n\nconst neptune = new StellarObject(\n  24.622,\n  \"./textures/neptune/neptune_diffuse.jpg\",\n  sun.obj,\n  \"Neptune\"\n)\n\nneptune.addOrbit(30.1104, 0.0094, 6.34, 29.81, sun, 0x3448ff);\nneptune.updatePosition(0);\n\nconst pluto = new StellarObject(\n  100000.187,\n  \"./textures/pluto/pluto_diffuse.jpg\",\n  sun.obj,\n  \"Pluto\"\n)\npluto.addOrbit(39.48, 0.2488, 17.16, 29.659, sun, 0xc29a6d);\npluto.updatePosition(0);\n\nSceneManager.controls.target = sun.obj.position;\n\nwindow.earth = earth;\nwindow.sceneManager = SceneManager;\n\nSceneManager.camera.position.x = -309000;\nSceneManager.camera.position.y = 441000;\nSceneManager.camera.position.z = 236000;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/mainScene.js\n// module id = 0\n// module chunks = 0","const MathHelper = require ('./../helpers/mathHelper.js');\nconst SimObject = require ('./simObject.js');\n\nconst ORBIT_POINTS = 100;\n\nclass StellarObject extends SimObject {\n  constructor (size, tex_file, parent, name) {\n    super();\n\n    this.obj = new THREE.Object3D();\n    this.orbit = null;\n    this.orbitCurve = null;\n    this.ring = null;\n    this.positionOnOrbit = 0;\n    this.label = undefined;\n    this.name = name;\n    parent.add(this.obj);\n    this.addBody(size, tex_file);\n    this.addLabel(this.name);\n  }\n\n  addBody (size, tex_file) {\n    let body = new THREE.Mesh(\n      new THREE.SphereGeometry(size, 64, 64),\n      new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(tex_file)\n      })\n    );\n    this.obj.add(body);\n    this.body = body;\n  }\n\n  // Create an orbit. Takes the following parameters:\n  // semiMajorAxis: The semi major axis of the ellipse, measured in AU\n  // eccentricity: Used to calculate the semi minor axis\n  // inclination: Inclination of the orbits pane relative to the sun\n  // perihelion: Closest approach to the sun, measured in AU\n  // root: The object this orbit is attached to. Should be the sun\n  // color: The color the orbit is drawn in.\n  addOrbit (semiMajorAxis, eccentricity, inclination, perihelion, root, color = 0x44444) {\n\n    let semiMinorAxis = MathHelper.minorAxis(semiMajorAxis, eccentricity);\n    let ellipseCenterX =\n      root.obj.position.x - MathHelper.auToUnits((semiMajorAxis - perihelion));\n\n    var curve = new THREE.EllipseCurve(\n    \tellipseCenterX,  root.obj.position.y,\n    \tMathHelper.auToUnits(semiMajorAxis), MathHelper.auToUnits(semiMinorAxis),\n    \t0,  2 * Math.PI,  // aStartAngle, aEndAngle\n    \tfalse,            // aClockwise\n    \t0                 // aRotation\n    );\n\n    var path = new THREE.Path( curve.getPoints(ORBIT_POINTS) );\n\n    var geometry = path.createPointsGeometry(ORBIT_POINTS);\n    var material = new THREE.LineBasicMaterial( { color : color } );\n\n    // Rotate orbit by 90 deg to have it sit on the correct plane, then apply inclination\n    geometry.rotateX(MathHelper.degToRad(90 + inclination));\n\n    // Create the final object to add to the scene\n    this.orbit = new THREE.Line( geometry, material );\n\n    this.geometry = geometry;\n    root.obj.add(this.orbit)\n  }\n\n  addRing (innerRadius, outerRadius, tex_file, alpha_map) {\n    let ringGeometry = new THREE.RingGeometry(innerRadius, outerRadius, 64)\n\n    this.ring = new THREE.Mesh(\n      ringGeometry,\n      new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(tex_file),\n        alphaMap: new THREE.TextureLoader().load(alpha_map),\n        transparent: true\n      })\n    )\n    this.obj.add(this.ring);\n  }\n\n  updatePosition (newPositionOnOrbit) {\n    if (this.geometry === undefined) {\n      return;\n    }\n\n    let idxLower = Math.floor(newPositionOnOrbit * ORBIT_POINTS);\n    let idxHigher = idxLower + 1;\n\n    let lowerSectionBound = idxLower / ORBIT_POINTS;\n    let higherSectionBound = idxHigher / ORBIT_POINTS;\n\n    let sectionSize = higherSectionBound - lowerSectionBound;\n    let sectionPercentage = ((newPositionOnOrbit - lowerSectionBound) / sectionSize);\n\n    if (idxHigher > ORBIT_POINTS) {\n      idxHigher = 0;\n    };\n\n    let pos1 = this.geometry.vertices[idxLower];\n    let pos2 = this.geometry.vertices[idxHigher];\n\n    let v1 = new THREE.Vector3(pos1.x, pos1.y, pos1.z);\n    v1.lerp(pos2, sectionPercentage);\n\n    this.obj.position.x = v1.x;\n    this.obj.position.y = v1.y;\n    this.obj.position.z = v1.z;\n  }\n\n  addLabel(name) {\n    //this.label = $('<div class=\"label\">'+name+'></div>').appendTo('body');\n    let div = document.createElement('div');\n    div.innerHTML = name;\n    div.className = \"label\";\n    this.label = document.body.appendChild(div);\n  }\n\n  updateLabelPosition () {\n    if (this.label === undefined || this.name == \"Sun\" || this.body === undefined ) {\n      return;\n    }\n\n    // check if object is on screen\n    if (!this.sceneManager.frustum.intersectsObject(this.body)) {\n      return;\n    }\n\n    var vector = new THREE.Vector3();\n    var canvas = this.sceneManager.renderer.domElement;\n\n    vector.set( this.obj.position.x, this.obj.position.y, this.obj.position.z );\n\n    // map to normalized device coordinate (NDC) space\n    vector.project(this.sceneManager.camera);\n\n    // map to 2D screen space\n    vector.x = Math.round( (   vector.x + 1 ) * canvas.width  / 2 );\n    vector.y = Math.round( ( - vector.y + 1 ) * canvas.height / 2 );\n\n    if (vector.z < 0) {\n      this.label.style.display = \"none\";\n    } else {\n      this.label.style.display = \"block\";\n    }\n\n    vector.z = 0;\n    this.label.style.left = vector.x+\"px\";\n    this.label.style.top = vector.y+\"px\";\n  }\n\n  update(delta) {\n    this.positionOnOrbit = ((this.positionOnOrbit + delta * 10) % 1);\n    this.updatePosition(this.positionOnOrbit);\n    this.updateLabelPosition();\n  }\n}\n\nmodule.exports = StellarObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/stellar_objects/stellar_object.js\n// module id = 1\n// module chunks = 0","const degToRad = function (deg) {\n  return deg * (Math.PI / 180);\n}\n\nconst radToDeg = function (rad) {\n  return rad * (180 / Math.PI);\n}\n\nconst auToUnits = function (au) {\n  return au * 149597.8707;\n}\n\nconst minorAxis = function (majorAxis, eccentricity) {\n  return majorAxis * Math.sqrt(1 - Math.pow(eccentricity, 2));\n}\n\nmodule.exports = {\n  degToRad: degToRad,\n  radToDeg: radToDeg,\n  auToUnits: auToUnits,\n  minorAxis: minorAxis,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/helpers/mathHelper.js\n// module id = 2\n// module chunks = 0","const SceneManager = require ('./../scene/sceneManager.js');\n\nclass SimObject {\n  constructor () {\n    SceneManager.initSimObject(this);\n    this.obj = new THREE.Object3D();\n    this.sceneManager = SceneManager;\n  };\n\n  // Update is called once per frame\n  update (delta) { }\n}\n\nmodule.exports = SimObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/stellar_objects/simObject.js\n// module id = 5\n// module chunks = 0","// Set up references\nconst scene = new THREE.Scene();\nconst clock = new THREE.Clock();\nconst camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 10, 1000000000000 );\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nvar frustum = new THREE.Frustum();\nvar cameraViewProjectionMatrix = new THREE.Matrix4();\n\nlet simObjects = [];\nconst controls = new THREE.OrbitControls(camera, renderer.domElement);\nconst initScene = function () {\n  // Set size to fullscreen\n  renderer.setSize( window.innerWidth, window.innerHeight );\n\n  // append renderer to document\n  document.body.appendChild( renderer.domElement );\n\n  // Create an event listener that resizes the renderer with the browser window.\n  window.addEventListener('resize', function() {\n    var WIDTH = window.innerWidth,\n        HEIGHT = window.innerHeight;\n    renderer.setSize(WIDTH, HEIGHT);\n    camera.aspect = WIDTH / HEIGHT;\n    camera.updateProjectionMatrix();\n  });\n\n  rootObject = new THREE.Object3D();\n  rootObject.position.x = 1;\n\n  controls.target = rootObject.position;\n\n  // Start simulation and render loop\n  render();\n}\n\nconst render = function () {\n  time = clock.getElapsedTime();\n  delta = clock.getDelta();\n  requestAnimationFrame(render);\n\n  // Update camera matrix and get current frustum. This is required to check if any objects are currently out of bounds\n  camera.updateMatrixWorld();\n  camera.matrixWorldInverse.getInverse(camera.matrixWorld);\n  cameraViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n  frustum.setFromMatrix(cameraViewProjectionMatrix);\n\n\n  // Update all active simulation objects with the current delta\n  simObjects.forEach(obj => {\n    obj.update(delta);\n  })\n\n  controls.update();\n\n  renderer.render(scene, camera);\n}\n\nconst initSimObject = function (newObject) {\n  simObjects.push(newObject);\n}\n\nmodule.exports = {\n  initScene: initScene,\n  scene: scene,\n  clock: clock,\n  camera: camera,\n  renderer: renderer,\n  initSimObject: initSimObject,\n  controls: controls,\n  frustum: frustum\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/scene/sceneManager.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}